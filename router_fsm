module router_fsm(input clock,resetn,pkt_valid,parity_done,soft_reset_0,soft_reset_1,soft_reset_2,fifo_full,low_pkt_valid,empty_0,empty_1,empty_2,input [1:0] data_in,output detect_add,ld_state,laf_state,full_state,write_enb_reg,rst_int_reg,lfd_state,busy);

parameter DECODE_ADDRESS =3'b000,
          LOAD_FIRST_DATA =3'b001,
          LOAD_DATA =3'b010,
          LOAD_PARITY =3'b011,
          CHECK_PARIY_ERROR =3'b100,
          FIFO_FULL_STATE =3'b101,
          LOAD_AFTER_FULL =3'b110,
          WAIT_TILL_EMPTY =3'b111;



  reg [2:0] present_state,next_state;



 always@(posedge clock )
 begin
         if(!resetn)
                 present_state<= DECODE_ADDRESS;
         else if((data_in ==2'b00 && soft_reset_0)||(data_in ==2'b01 && soft_reset_1)||(data_in ==2'b10 && soft_reset_2))
                        present_state<= DECODE_ADDRESS;
         else
                 present_state<= next_state;
 end



always@(*)
begin
                next_state= DECODE_ADDRESS;
        case(present_state)

        DECODE_ADDRESS:


                begin

                        if(((pkt_valid)&&(data_in[1:0]==2'd0)&&(empty_0))||
                        ((pkt_valid)&&(data_in[1:0]==2'd1)&&(empty_1))||
                        ((pkt_valid)&&(data_in[1:0]==2'd2)&&(empty_2)))

                        next_state = LOAD_FIRST_DATA;

                        else if(((pkt_valid)&&(data_in[1:0]==2'd0)&&(!empty_0))||
                        ((pkt_valid)&&(data_in[1:0]==2'd1)&&(!empty_1))||
                        ((pkt_valid)&&(data_in[1:0]==2'd2)&&(!empty_2)))

                        next_state = WAIT_TILL_EMPTY;


                        else
                        next_state= DECODE_ADDRESS;
        end


        LOAD_FIRST_DATA:next_state= LOAD_DATA;

        LOAD_DATA:

                begin

                        if((!fifo_full)&&(!pkt_valid))
                        begin
                        next_state= LOAD_PARITY;
                        end

                        else if(fifo_full)
                        begin
                        next_state= FIFO_FULL_STATE;
                        end

                        else
                        begin
                        next_state= LOAD_DATA;
                        end
end

        LOAD_PARITY: next_state= CHECK_PARIY_ERROR;


        CHECK_PARIY_ERROR:
                begin
                if(fifo_full)
                next_state =FIFO_FULL_STATE;
                else
                next_state =DECODE_ADDRESS;
                end

        FIFO_FULL_STATE:
                begin
                if(fifo_full)
                next_state =FIFO_FULL_STATE;
                else
                next_state =LOAD_AFTER_FULL;
                end

        LOAD_AFTER_FULL:

                begin
           if(parity_done)
                next_state =DECODE_ADDRESS;
                else if(!parity_done && low_pkt_valid)
                next_state =LOAD_PARITY;
                else if(!parity_done && !low_pkt_valid)
                next_state =LOAD_DATA;
                else
                next_state =LOAD_AFTER_FULL;
                end
 WAIT_TILL_EMPTY:
        begin

                if(((pkt_valid)&&(data_in[1:0]==2'd0)&&(empty_0))||
                ((pkt_valid)&&(data_in[1:0]==2'd1)&&(empty_1))||
                ((pkt_valid)&&(data_in[1:0]==2'd2)&&(empty_2)))

                next_state = LOAD_FIRST_DATA;

                else
                next_state = WAIT_TILL_EMPTY;

                end


endcase
end

assign detect_add=(present_state == DECODE_ADDRESS);
assign ld_state=(present_state == LOAD_DATA);
assign laf_state=(present_state == LOAD_AFTER_FULL);
assign full_state=(present_state == FIFO_FULL_STATE);
assign write_enb_reg=(present_state == LOAD_AFTER_FULL)||(present_state == LOAD_DATA)||(present_state == LOAD_PARITY);
assign rst_int_reg=(present_state == CHECK_PARIY_ERROR);
assign lfd_state=(present_state == LOAD_FIRST_DATA);
assign busy=(present_state == LOAD_FIRST_DATA)||
                                (present_state == LOAD_PARITY)||
                                (present_state == CHECK_PARIY_ERROR)||
                                (present_state == FIFO_FULL_STATE)||
                                (present_state == LOAD_AFTER_FULL)||
                                (present_state == WAIT_TILL_EMPTY);

endmodule
