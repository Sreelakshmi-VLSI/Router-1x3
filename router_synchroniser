module router_synch(input clock,resetn,write_enb_reg,detect_add,read_enb_0,read_enb_1,read_enb_2, input [1:0]data_in,
        input empty_0,empty_1,empty_2,input  full_0,full_1,full_2,output reg soft_reset_0,soft_reset_1,soft_reset_2, output vld_out_0,vld_out_1,vld_out_2, output reg [2:0]write_enb, output reg fifo_full);
reg [1:0]fifo_addr;
reg[4:0]counter_0_soft_reset;
reg[4:0]counter_1_soft_reset;
reg[4:0]counter_2_soft_reset;
always@(posedge clock)
begin
if(!resetn)
        fifo_addr<=2'b00;
        else if(detect_add)
        fifo_addr<=data_in;
        else
                fifo_addr<=2'b00;
end
always@(*)
begin
if(write_enb_reg==1'b1)
begin
case(fifo_addr)
2'b00:write_enb<=3'b001;
2'b01:write_enb<=3'b010;
2'b10:write_enb<=3'b100;
default:write_enb<=3'b000;
endcase
end
else
        write_enb<=3'b000;
end
always@(*)
begin
if(!resetn)
        begin
                fifo_full<=1'b0;
                end
        else if(fifo_addr==2'b00)
                fifo_full<=full_0;
                else if(fifo_addr==2'b01)
                fifo_full<=full_1;
                else if(fifo_addr==2'b10)
fifo_full<=full_2;
                else
                fifo_full<=1'b0;
end
        assign vld_out_0=!empty_0;
        assign vld_out_1=!empty_1;
        assign vld_out_2=!empty_2;


always@(posedge clock)
begin
        if(!resetn)
        begin
                counter_0_soft_reset<=5'd1;
                soft_reset_0<=1'b0;
        end
        else if(!vld_out_0)
        begin
                counter_0_soft_reset<=5'd1;
                soft_reset_0<=1'b0;
        end
        else if(read_enb_0)
        begin
                counter_0_soft_reset<=5'd1;
                soft_reset_0<=1'b0;
        end
        else if(counter_0_soft_reset==5'd30)
                begin
                counter_0_soft_reset<=5'd1;
                soft_reset_0<=1'b1;
                end
                else
                begin
counter_0_soft_reset<=counter_0_soft_reset+5'd1;
                soft_reset_0<=1'b0;
                end
                end
always@(posedge clock)
begin
        if(!resetn)
        begin
                counter_1_soft_reset<=5'd1;
                soft_reset_1<=1'b0;
        end
        else if(!vld_out_1)
        begin
                counter_1_soft_reset<=5'd1;
                soft_reset_1<=1'b0;
        end
        else if(read_enb_1)
        begin
                counter_1_soft_reset<=5'd1;
                soft_reset_1<=1'b0;
                end
        else if(counter_1_soft_reset==5'd30)
                begin
                counter_1_soft_reset<=5'd1;
                soft_reset_1<=1'b1;
                end
                else
                begin
                counter_1_soft_reset<=counter_1_soft_reset+5'd1;
                soft_reset_1<=1'b0;
                end
                end
always@(posedge clock)
begin
        if(!resetn)
        begin
                counter_2_soft_reset<=5'd1;
                soft_reset_2<=1'b0;
        end
        else if(!vld_out_2)
        begin
                counter_2_soft_reset<=5'd1;
                soft_reset_2<=1'b0;
        end
        else if(read_enb_2)
        begin
                counter_2_soft_reset<=5'd1;
                soft_reset_2<=1'b0;
                end
        else if(counter_2_soft_reset==5'd30)
                begin
                counter_2_soft_reset<=5'd1;
                soft_reset_2<=1'b0;
                end
                else
                begin
                counter_2_soft_reset<=counter_2_soft_reset+5'd1;
                soft_reset_2<=1'b0;
                end
                end

endmodule
