interface router_if(input bit clock);

        logic pkt_valid,err,busy,vld_out,read_enb,resetn;
        logic [7:0] data_in,data_out;
//assign clock=clock;

clocking src_drv_cb @(posedge clock);
default input #1 output #1;
output pkt_valid,data_in,resetn ;
input busy,err;
endclocking

clocking src_mon_cb @(posedge clock);
default input #1 output #1;
input pkt_valid,data_in,resetn, busy,err;
endclocking

clocking dest_drv_cb @(posedge clock);
default input #1 output #1;
output read_enb;
input vld_out;
endclocking

clocking dest_mon_cb @(posedge clock);
default input #1 output #1;
input vld_out,data_out,read_enb;
endclocking

modport SDRV_MP(clocking src_drv_cb);
modport SMON_MP(clocking src_mon_cb);
modport DDRV_MP(clocking dest_drv_cb);
modport DMON_MP(clocking dest_mon_cb);
endinterface
