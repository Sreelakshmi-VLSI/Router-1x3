module top;

    //import ram_pkg.sv
      import router_test_pkg::*;

    // import the UVM package
        import uvm_pkg::*;

    // include the uvm_macros.svh
        //      `include "uvm_macros.svh"
        bit clock;
        always
                #10 clock=!clock;

                router_if in(clock);
                router_if in0(clock);
                router_if in1(clock);
                router_if in2(clock);


        router_top DUV(.clk(clock), .rst(in.resetn), .rd_en0(in0.read_enb), .rd_en1(in1.read_enb), .rd_en2(in2.read_enb), .pkt_vld(in.pkt_valid), .din(in.data_in), .dout0(in0.data_out), .dout1(in1.data_out), .dout2(in2.data_out), .vld_out0(in0.vld_out), .vld_out1(in1.vld_out), .vld_out2(in2.vld_out), .err(in.err), .busy(in.busy));


    //Within initial block call run_test("ram_wr_test")
        initial
                begin

                        `ifdef VCS
                        $fsdbDumpvars(0, top);
                        `endif

                        uvm_config_db #(virtual router_if)::set(null,"*","in",in);
                        uvm_config_db #(virtual router_if)::set(null,"*","in0",in0);
                        uvm_config_db #(virtual router_if)::set(null,"*","in1",in1);
                        uvm_config_db #(virtual router_if)::set(null,"*","in2",in2);

                        run_test();
                end
//initial
//      begin
//              run_test();
//      end

property stable_data;
@(posedge clock) in.busy|=>$stable(in.data_in);
endproperty

property busy_check;
@(posedge clock) $rose(in.pkt_valid)->in.busy;
endproperty

property valid_signal;
@(posedge clock) $rose (in.pkt_valid)|-> ##3 {in0.vld_out| in1.vld_out | in2.vld_out};
endproperty

property rd_enb0;
@(posedge clock) in0.vld_out |-> ##[1:29]in0.read_enb;
endproperty

property rd_enb1;
@(posedge clock) in1.vld_out |-> ##[1:29]in1.read_enb;
endproperty

property rd_enb2;
@(posedge clock) in2.vld_out |-> ##[1:29]in2.read_enb;
endproperty


property read_enb1_low;
@(posedge clock) $fell(in0.vld_out)|=> ##1 $fell(in0.read_enb);
endproperty

property read_enb2_low;
@(posedge clock) $fell(in1.vld_out)|=> ##1 (in1.read_enb);
endproperty

property read_enb3_low;
@(posedge clock) $fell(in2.vld_out)|=> ##1 $fell(in1.read_enb);
endproperty

C1: assert property (stable_data)
$display("C2 success");
else
$display("C1 failed");

C2: assert property (busy_check)
$display("C2 success");
else
$display("C2 failed");

C3: assert property (valid_signal)
$display("C3 success");
else
$display("C3 failed");

C4: assert property (rd_enb0)
$display("C4 success");
else
$display("C4 failed");

C5: assert property (rd_enb1)
$display("C5 success");
else
$display("C5 failed");

C6: assert property (rd_enb2)
$display("C6 success");
else
$display("C6 failed");

P1:cover property(stable_data);
P2:cover property(busy_check);
P3:cover property(valid_signal);
P4:cover property(rd_enb0);
P5:cover property(rd_enb1);
P6:cover property(rd_enb2);


endmodule : top

