class source_wr_seqs extends uvm_sequence #(source_write_xtn);


        `uvm_object_utils(source_wr_seqs)
        extern function new(string name ="source_wr_seqs");
endclass
function source_wr_seqs::new(string name ="source_wr_seqs");
                super.new(name);
endfunction

class small_packet extends source_wr_seqs;
`uvm_object_utils(small_packet);
bit [1:0] addr;

extern function new(string name ="small_packet");
extern task body();
endclass
function small_packet::new(string name ="small_packet");
                super.new(name);
endfunction
task small_packet::body();
req=source_write_xtn::type_id::create("req");
if(!uvm_config_db#(bit[1:0])::get(null,get_full_name(),"addr",addr))
        `uvm_fatal(get_full_name(),"error")
start_item(req);
assert(req.randomize() with {header[7:2] inside {[1:20]}; header[1:0]==addr;});
finish_item(req);
endtask


class medium_packet extends source_wr_seqs;
`uvm_object_utils(medium_packet);
bit [1:0] addr;

extern function new(string name ="medium_packet");
extern task body();
endclass
function medium_packet::new(string name ="medium_packet");
                super.new(name);
endfunction
task medium_packet::body();
req=source_write_xtn::type_id::create("req");
if(!uvm_config_db#(bit[1:0])::get(null,get_full_name(),"addr",addr))
        `uvm_fatal(get_full_name(),"error");
start_item(req);
assert(req.randomize() with {header[7:2] inside {[20:40]}; header[1:0]==addr;});

finish_item(req);
endtask
class large_packet extends source_wr_seqs;
`uvm_object_utils(large_packet);
bit [1:0] addr;

extern function new(string name ="large_packet");
extern task body();
endclass
function large_packet::new(string name ="large_packet");
                super.new(name);
endfunction
task large_packet::body();
req=source_write_xtn::type_id::create("req");
if(!uvm_config_db#(bit[1:0])::get(null,get_full_name(),"addr",addr))
        `uvm_fatal(get_full_name(),"error");
start_item(req);
assert(req.randomize() with {header[7:2] inside {[40:63]}; header[1:0]==addr;});

finish_item(req);
endtask

class error_packet extends source_wr_seqs;
`uvm_object_utils(error_packet);
bit [1:0] addr;

extern function new(string name ="error_packet");
extern task body();
endclass
function error_packet::new(string name ="error_packet");
                super.new(name);
endfunction
task error_packet::body();
req=source_write_xtn::type_id::create("req");
if(!uvm_config_db#(bit[1:0])::get(null,get_full_name(),"addr",addr))
        `uvm_fatal(get_full_name(),"error");
start_item(req);
assert(req.randomize() with {header[7:2] inside {[40:63]}; header[1:0]==addr;});
req.parity=8'b11111110;

finish_item(req);
endtask
